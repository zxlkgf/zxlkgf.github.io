---
title: "力扣hot100_14_合并K个升序链表"
date: 2023-03-14T09:20:14+08:00
tags: ["力扣hot100"]
categories: ["力扣hot100"]
draft: false
---

# 合并K个升序链表
[合并K个升序链表](https://leetcode.cn/problems/merge-k-sorted-lists/?favorite=2cktkvj)

给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

示例1
```text
输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1->4->5,
  1->3->4,
  2->6
]
将它们合并到一个有序链表中得到。
1->1->2->3->4->4->5->6

```

## 题解和思路

按照循序遍历

将其一个个的组合即可

```c++
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode *ans = NULL;
        for(int i = 0 ;i < lists.size();++i){
            ans = ansmethod(ans,lists[i]);
        }
        return ans;
    }
    ListNode * ansmethod(ListNode* a,ListNode* b){
        ListNode  head;
        ListNode* tail = &head;
        ListNode* l1 = a;
        ListNode* l2 = b;
        while(l1&&l2){
            if(l1->val < l2->val){
                tail->next = l1;
                l1 = l1->next;
            }else{
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        tail->next = (l1?l1:l2);
        return head.next;
    }

};

```