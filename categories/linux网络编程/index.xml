<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux网络编程 - Category - Cyo&#39;s Website</title>
        <link>http://example.org/categories/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
        <description>Linux网络编程 - Category - Cyo&#39;s Website</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>z514111073@gmail.com (Cyo)</managingEditor>
            <webMaster>z514111073@gmail.com (Cyo)</webMaster><lastBuildDate>Mon, 06 Mar 2023 08:52:16 &#43;0800</lastBuildDate><atom:link href="http://example.org/categories/linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/" rel="self" type="application/rss+xml" /><item>
    <title>UDP</title>
    <link>http://example.org/udp%E9%80%9A%E4%BF%A1/</link>
    <pubDate>Mon, 06 Mar 2023 08:52:16 &#43;0800</pubDate>
    <author>Cyo</author>
    <guid>http://example.org/udp%E9%80%9A%E4%BF%A1/</guid>
    <description><![CDATA[UDP UDP通信 #include &lt;sys/types.h&gt; #include &lt;sys/socket.h&gt; ssize_t sendto(int sockfd,const void *buf,size_t len,int flags,const struct sockaddr *dest_addr,socklen_t addrlen); 参数: -sockfd：通信的fd -buf:需要发送的数据 -len:数组的大小 -flags:设置一些]]></description>
</item>
<item>
    <title>IO多路复用(select,poll,epoll)</title>
    <link>http://example.org/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
    <pubDate>Sun, 05 Mar 2023 14:52:16 &#43;0800</pubDate>
    <author>Cyo</author>
    <guid>http://example.org/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
    <description><![CDATA[IO多路复用 I/O 多路复用使得程序能够同时监听多个文件描述符，能够提高程序的性能，Linux下实现I/O多路复用的系统调用主要有select ，p]]></description>
</item>
<item>
    <title>端口复用</title>
    <link>http://example.org/%E5%8D%8A%E5%85%B3%E9%97%AD-%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8/</link>
    <pubDate>Sun, 05 Mar 2023 08:52:16 &#43;0800</pubDate>
    <author>Cyo</author>
    <guid>http://example.org/%E5%8D%8A%E5%85%B3%E9%97%AD-%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8/</guid>
    <description><![CDATA[半关闭 当TCP连接中A向B发送FIN请求关闭，另一端B回应ACK之后(A端进入FIN_WAIT_2状态)，并没有立即发送FIN给A，A方处于]]></description>
</item>
<item>
    <title>Socket通信</title>
    <link>http://example.org/socket%E9%80%9A%E4%BF%A1/</link>
    <pubDate>Sat, 04 Mar 2023 14:52:16 &#43;0800</pubDate>
    <author>Cyo</author>
    <guid>http://example.org/socket%E9%80%9A%E4%BF%A1/</guid>
    <description><![CDATA[TCP通信流程 ! //TCP通信流程 //服务器端(被动接受的角色) 1.创建一个用于监听的套接字 -监听：监听有无客户端连接 -套接字：这个套接字其]]></description>
</item>
<item>
    <title>Socket地址</title>
    <link>http://example.org/socket%E5%9C%B0%E5%9D%80/</link>
    <pubDate>Sat, 04 Mar 2023 12:55:47 &#43;0800</pubDate>
    <author>Cyo</author>
    <guid>http://example.org/socket%E5%9C%B0%E5%9D%80/</guid>
    <description><![CDATA[socket地址 通用socket地址 socket网络编程接口中表示socket地址的是结构体sockaddr，其定义如下： #include &lt;bits/socket.h&gt; struct sockaddr { sa_family_t sa_family; char sa_data[14];]]></description>
</item>
<item>
    <title>字节序</title>
    <link>http://example.org/%E5%AD%97%E8%8A%82%E5%BA%8F/</link>
    <pubDate>Sat, 04 Mar 2023 08:55:47 &#43;0800</pubDate>
    <author>Cyo</author>
    <guid>http://example.org/%E5%AD%97%E8%8A%82%E5%BA%8F/</guid>
    <description><![CDATA[字节序 现代CPU的累加器一次都能装载至少4字节(32位机器),即一个整数。那么这四个字节在内存中排列的顺序将影响它被累加器装载成的整数的值，]]></description>
</item>
</channel>
</rss>
